
1. Explain different launch modes in Android.
Standard:
This launch mode generates an activity’s new instance in the task from which it originated.
It is possible to create several instances for the same activity.
For Example, suppose our current stack is A -> B -> C. Now, if we launch activity B again with the “standard” launch mode, then the new stack will be A -> B -> C -> B.

SingleTop:
This launch mode is similar to the Standard launch mode except if there exists an activity’s previous instance on the top of the stack, then a new instance will not be created.
But the intent will be sent to the activity’s existing instance.
For example, suppose our current stack is A -> B -> C. Now, if we launch the activity B again with “singleTop” launch mode,then the new stack will be A -> B -> C -> B.
Consider another example, where the current stack is A -> B -> C. Now, if we launch activity C again with the “singleTop” launch mode, then the stack will remain the same i.e., A -> B -> C. The intent will be passed to the onNewIntent() method.

SingleTask:
This launch mode will create a new task and push a new instance to the task as the root.
For example, suppose our current stack is A -> B -> C -> D. Now, if we launch activity B again with the “singleTask” launch mode, then the new stack will be A -> B. Here, a callback has been received on the old instance and C and D activities are destroyed.

SingleInstance:
This launch mode is similar to the SingleTask launch mode. But the system doesn’t support launching any new activities in the same task.
In a situation where the new activity is launched, it is launched in a separate task.
For example, Suppose our current stack is A -> B -> C. Now, if we launch the activity D with the “singleInstance” launch mode, then there will be two stacks:
A -> B -> C
D, If you call activity E, then it will be added to the first stack.
A -> B -> C -> E
D
Again if you Call the activity D, then it will call the same activity from the 2nd stack and pass the intent to onNewIntent().

2.Explain about java classes related to the use of sensors on Android.
Android sensor API provides many classes and interface for the use of sensors on Android.
The important classes and interfaces of sensor API are given below:
Sensor class: This class helps you to create an instance of a specific sensor. It provides methods that let you determine a sensor’s capabilities.
SensorManager class: This class is used to create an instance of the sensor service. It provides methods to access and list sensors, to register and unregister sensor listeners, etc.
SensorEvent class: This Java class is used to create a sensor event object. It provides information about the sensor event including raw sensor data, the accuracy of data, type of sensor, timestamp of event, etc.
SensorEventListener interface: This interface is used to create two callback methods that receive sensor event notifications when sensor value changes or when sensor accuracy changes. Those two methods are void onAccuracyChanged(Sensor sensor, int accuracy) which is called when sensor accuracy is changed and
void onSensorChanged(SensorEvent event) which is called when sensor values are changed.

3.What is the life cycle of Android activity?
OnCreate(): It is called when activity is created. Using this, the views are created and data is collected from bundles.
OnStart(): It is called if the activity is becoming visible to the user. It may be succeeded by onResume()
           if the activity comes to the foreground, or onStop() if it becomes hidden.
OnResume(): It is called when the activity will start an interaction with the user.
OnPause(): This is called when the activity is moving to the background but hasn’t been killed yet.
OnStop(): This is called when an activity is no longer visible to the user.
OnDestroy(): This is called when the activity is finished or destroyed.
OnRestart(): This is called after the activity has been stopped, prior to it being started again.

4.What is an intent?
Ans : An intent is a messaging object that is used to request an action from other components of an application.
It can also be used to launch an activity, send SMS, send an email,display a web page, etc.
It shows notification messages to the user from within an Android-enabled device. It alerts the user of a particular
state that occurred. There are two types of intents in Android:
Implicit Intent- Used to invoke the system components.
Explicit Intent- Used to invoke the activity class.

5. What is context in Android ?
  The context in Android is the context of the current state of the application or object.
  The context comes with services like giving access to databases and preferences, resolving resources, and more.There are two types of context. They are:
  Types of Context :-
  1: Activity context
  This activity context is attached to the lifecycle of an activity.
  The activity context can be used when you are passing the context in the scope of an activity or
  you need the context whose lifecycle is attached to the context of the activity.
  2: Application context:
  This application context is attached to the lifecycle of an application.
  The application context should be used where you need a context whose lifecycle is separate from the current context
  or when you are passing a context beyond the scope of activity.

6.What is AIDL? Which data types are supported by AIDL?
AIDL(Android Interface Definition Language) is a tool that handles the interface requirements between a client and a service for
interprocess communication(IPC) to communicate at the same level. The process involves dividing an object into
primitives that are understood by the Android operating system.
Data Types supported by AIDL is as follows:
String
List
Map
CharSequence
Java data types (int, long, char, and boolean)
7.What is Google Android SDK? Which are the tools placed in Android SDK?
The Google Android SDK is a toolset used by developers to write applications on Android-enabled devices.
The tools placed in Android SDK are given below:

Android Emulator - Android Emulator is a software application that simulates Android devices on your computer so that you can test the
application on a variety of devices and Android API levels without having each physical device.

DDMS(Dalvik Debug Monitoring Services) - It is a debugging tool from the Android software development kit (SDK) which provides services
like message formation, call spoofing, capturing screenshots, etc.

ADB(Android Debug Bridge) - It is a command-line tool used to allow and control communication with the emulator instance.

AAPT(Android Asset Packaging Tool) - It is a build tool that gives the ability to developers to view, create, and update ZIP-compatible
archives (zip, jar, and apk).
8.What is an Adapter in Android?
An adapter in Android acts as a bridge between an AdapterView and the underlying data for that view.
The adapter holds the data and sends the data to the adapter view,
the view can take the data from the adapter view and shows the data on different views like a spinner, list view, grid view, etc.
9.What is Android Debug Bridge(ADB)?
Android Debug Bridge is a command-line tool used to allow and control communication with an emulator instance.
It gives the power for developers to execute remote shell commands to run applications on an emulator.

10.What is Fragment and method in fragment
- Android Fragment is the part of activity it also known as sub-activity. we can add more then
 one fragment in single activity.fragment represent multiple inside one activity
 Fragment represents a behavior or a portion of user interface in an Activity. You can combine multiple
 fragments in a single activity to build a multi-pane UI and reuse a fragment in multiple activities.
 Fragment defination:
 In Android, the fragment is the part of Activity that represents a portion of the User Interface(UI) on
 the screen. It is the modular section of the android activity that is very helpful in creating UI
 designs that are flexible in nature and auto-adjustable based on the device screen size. You can combine
 multiple fragments in a single activity to build a multi-pane UI.
 There are mainly 3 types of fragments:
 1.Single Fragment
 2.List Fragment
 3.Fragment Transaction

Fragments in Android has several advantages:
Modularity: Fragments promote modular design by breaking down the UI into smaller, self-contained components.
Reusability: Fragments can be reused in different activities, enhancing code reusability.
Adaptability: Fragments are particularly useful for creating responsive layouts that can adapt to different
screen sizes and orientations.
Parallel Execution: Fragments allow multiple UI components to run in parallel within the same activity.

Fragment Life Cycle Method details:

 1.onAttach(): it is called when the fragment attached to an activity
 2.onCreate(): Called when the fragment is first created.
 3.onCreateView(): Invoked to create the view hierarchy associated with the fragment.
 4.onActivityCreated(): Called when the hosting activity's onCreate() method has completed.
 5.onStart(): Signals that the fragment is becoming visible.
 6.onResume(): Called when the fragment is visible and interactive.
 7.onPause(): Indicates that the fragment is no longer interactive or visible to the user.
 8.onStop(): Called when the fragment is no longer visible.
 9.onDestroyView(): Invoked when the view hierarchy associated with the fragment is being removed.
 10.onDestroy(): Called when the fragment is being destroyed.
 11.onDetach(): Called when the fragment is being disassociated from its hosting activity.


-------------------------------------------------------------------------------------------------------------
 Fragment Lifecycle state when we performing operation like back close remove add
 link:https://androidlearnersite.wordpress.com/2017/02/27/fragment-lifecycle-during-fragment-transaction/
 Case 1:
 1. When user click back from fragmentA to MainActivity below method is called in fragment
    -onPause(): is called
    -onStop(): is called
    -onDestroyView(): is called
    -onDestroy(): is called
    -onDetach(): is called

 2.When Fragment B is added to Fragment A
   getActivity().getSupportFragmentManager().beginTransaction().add(R.id.container, fragementB).addToBackStack(null).commit();
   Fragment B is calling below method to come foreground state
   -onAttach()
   -onCreate()
   -onCreateView()
   -onActivityCreated()
   -onStart()
   -onResume()
   note: No lifecycle methods of Fragment A is being called.
   Fragment A will only be affected if it’s removed or replaced. Simply adding another fragment will just
   display fragment B over fragment A and no life cycle callbacks of fragment A should be called.

 3.Then using popBackStack() in Fragment B (stack sequence: Fragment B-> Fragment A)
   Fragment B is called below method after remove the fragment top of stack using the popBackStack() method.
   - onPause()
   - onStop()
   - onDestroyView()
   - onDestroy()
   - onDetach()
  note: No lifecycle methods of Fragment A is being called Since fragment B was added on top of A, fragment A is not affected by the removal of B.
 4. On Fragment Launched (First Time)
   - onAttach:
   - onCreateView:
   - onViewCreated:
   - onActivityCreated:
   - onStart:
   - onResume:

 Case 2:
 1. When Fragment B replaces Fragment A
    getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.container, fragementB).commit();
    When Fragment B is replaces fragment A using replace() below method is called in both fragment. by Sequence
    Fragment B
    - onAttach()
    - onCreate()
    Fragment A
    - onPause()
    - onStop()
    - onDestroyView()
    - onDestroy()
    - onDetach()
    Fragment B
    - onCreateView()
    - onActivityCreated()
    - onStart()
    - onResume()

    Note:When Fragment B replaces Fragment A,Fragment A is destroyed and Fragment B is created.However
        in case the transaction that had added Fragment A was saved using addToBackStack method,then backstack
        is holding reference to that fragment from previous transaction and hence only its view is destroyed.i.e.
        onDestroy and onDetach method of Fragment A will not be called.
Case 3:
 1. When Fragment B replace Fragment A keeping it in backstack.
   FragmentB fragmentB = new Fragment()
   getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.container, fragementB).addToBackStack("tag").commit();
   Fragment B
   - onAttach()
   - onCreate()
   Fragment A
   - onPause()
   - onStop()
   - onDestroyView()
   Fragment B
   - onCreateView()
   - onActivityCreated()
   - onStart()
   - onResume()
   note:onDestroy and onDetach method of Fragment A is NOT called.Unlike a simple replace,
   when you add your replace transaction to the backstack you’re actually keeping the
   first fragment attached to it’s activity, only its view is destroyed.

 2. The using popBackStack() in Fragment B
   Fragment B
  - onPause()
  - onStop()
  - onDestroyView()
  - onDestroy()
  - onDetach()
  Fragment A
  - onCreateView()
  - onActivityCreated()
  - onStart()
  - onResume()
  note: View of Fragment A is recreated and Fragment B is destroyed

  FragmentTransaction class has a method named setAllowOptimization().It sets whether or not to allow optimizing
  operations within and across transactions.Setting its value to true during fragment transaction,you will see change
  in the sequence in which lifecycle’s methods are called.setAllowOptimization() was deprecated in API level 26.1.0
  and has been renamed to setReorderingAllowed().

  In Case 2 during replacing Fragment, lifecycle methods of Fragment B are called before lifecycle methods of Fragment A
  if setAllowOptimization() is set to true
 Fragment B
 onAttach-onCreate-onCreateView-onActivityCreated-onStart-onResume
 Fragment A
 onPause-onStop-onDestroyView-onDestroy-onDetach

 In Case 3 during replacing fragment,lifecycle methods of Fragment B are called before lifecycle methods of Fragment A
 if setAllowOptimization() is set to true
 Fragment B
 onAttach-onCreate-onCreateView-onActivityCreated-onStart-onResume
 Fragment A
 onPause-onStop-onDestroyView

 In Case 3 using popBackStack() in Fragment B,lifecycle methods of Fragment A are called before lifecycle methods of
 Fragment B if setAllowOptimization() is set to true .
 Fragment A
 onCreateView-onActivityCreated-onStart-onResume
 Fragment B
 onPause-onStop-onDestroyView-onDestroy-onDetach
 In Case 1, sequence of lifecycle method calls will remain same whether setAllowOptimization is true or false.
 ---------------------------------------------------------------------------------------------------------------------------
 Fragment Scenario test case
 link: https://medium.com/androiddevelopers/the-android-lifecycle-cheat-sheet-part-iii-fragments-afc87d4f37fd
 Scenario 1: Activity with Fragment starts and finishes
 Activity                                                 Fragment
 onCreated()----------------------------------->-onAttach()
            ----------------------------------->-onCreate(Null)
            ----------------------------------->-onCreateView(Null)
            ----------------------------------->-onActivityCreated(Null)
 onStart() <----------------------------------->-onStart()
 onResume()<----------------------------------->-onResume()
      Fragment is become visible and interact to user

 Back pressed
 onPause()<------------------------------------> onPause()
 onStop() <------------------------------------> onStop()
 onDestroy() <---------------------------------> onDestroyView()


 ---------------------------------------------------------------------------------------------------------------------------
 11.Question: Why is it recommended to use only the default constructor to create a Fragment?
 link:https://amitshekhar.me/blog/default-constructor-to-create-a-fragment
 Ans: Whenever the Android Framework decides to recreate our Fragment for example in case of orientation changes.
 Android calls the no-argument constructor of our Fragment.
 The reason why can’t it call the constructor with the argument is that Android Framework has no idea
 what constructor we have created. So it can’t.

 12.Question: which is lifecycle method will call in fragment when the orientation changes or screen rotated?
 Ans: When the screen orientation changes or the device is rotated in Android, the activity is typically destroyed
 and recreated. This change triggers certain lifecycle methods for both the activity and its fragments.
 For fragments, the key methods related to orientation changes are:
 1.onPause(): This method is called when the fragment is no longer visible or interactive.
 It's a signal that the fragment is about to be detached from the current activity.
 2.onStop(): Similar to onPause(), this method is called when the fragment is no longer visible.
 3.onDestroyView(): This method is called to indicate that the view hierarchy associated with the fragment is being removed.
 4.onDestroy(): Called when the fragment is being destroyed.
 5.onDetach(): This method is called when the fragment is being disassociated from its hosting activity.
 After the orientation change, the activity is recreated, and the following methods are called for the fragment:
 1.onAttach(): Called when the fragment is associated with a new activity.
 2.onCreate(): Invoked when the fragment is first created.
 3.onCreateView(): Invoked to create the view hierarchy associated with the fragment.
 4.onActivityCreated(): Called when the hosting activity's onCreate() method has completed.
 5.onStart(): Signals that the fragment is becoming visible.
 6.onResume(): Called when the fragment is visible and interactive.

 These lifecycle methods allow developers to handle changes in configuration, such as screen orientation changes,
 by saving and restoring the necessary state information. For example, you can use the onSaveInstanceState()
 method to save data before the fragment is destroyed and then restore it in the onCreate() or onCreateView()
 methods after the recreation.
 Here's a simplified sequence of lifecycle methods during a screen orientation change:
 onPause()
 onStop()
 onDestroyView()
 onDestroy()
 onDetach() - destroy the fragment
 onAttach() - recreate the fragment after screen rotation
 onCreate()
 onCreateView()
 onActivityCreated()
 onStart()
 onResume()

 ----------------------------------------------------------------------------------------------------------------------------
        On Fragment Launched (First Time)
        ———————————————————————
        link: https://stackoverflow.com/questions/42218546/understanding-fragments-lifecycle-methods-calls-during-fragment-transaction/42237744#42237744
        onAttach:
        onCreateView:
        onViewCreated:
        onActivityCreated:
        onStart:
        onResume:


        On Coming Back To Fragment (From another fragment)
        ———————————————————————
        onCreateView:
        onViewCreated:
        onActivityCreated:
        onStart:
        onResume:


        OnMaximize(Square Button-After Back Pressed)
        ———————————————————————
        onAttach:
        onCreateView:
        onViewCreated:
        onActivityCreated:
        onStart:
        onResume:


        OnMaximize(Square Button-After Circle Button)
        ———————————————————————
        onStart:
        onResume:


        OnMaximize(After Circle Button)
        ————————————————————————————————————————————————
        onStart:
        onResume:
        Fragment Stopped

        On Going To Another Fragment (Skipping 1 Fragment)
        ———————————————————————
        onPause:
        onStop:
        onDestroyView:


        On BackPressed - Reverse Triangle Button (App Minimized)
        ———————————————————————
        onPause:
        onStop:
        onDestroyView:
        onDestroy:
        onDetach:


        OnMinimize (Circle Button)
        ————————————————————————————————————————————————
        onPause:
        onStop:


        OnMinimize (Square Button)
        ————————————————————————————————————————————————
        onPause:
        onStop:


        Going To Another Activity
        ————————————————————————————————————————————————
        onPause:
        onStop:


        Close The App
        ————————————————————————————————————————————————
        onDestroyView:
        onDestroy:

13.What is AAPT?
In android AAPT stands for Android Asset Packaging Tool. It is a build tool that gives the ability to developers to view, create
and update ZIP-compatible archives (zip, jar, and apk). It parses, indexes, and compiles the resources into a binary format that is
optimized for the platform of Android.

14.What are the features of Android architecture?
 Android architecture refers to the various layers in the Android stack. It consists of operating systems, middleware,
 and applications. Each layer in the Android architecture gives different services to the layer just above it.
The five layers present in the Android stack are:
Linux Kernel - It is responsible for device drivers, device management, memory management, power management, and resource access.
Libraries - There are a set of libraries having open-source Web browser engine WebKit, well-known library libc, libraries to play
and record audio and video, SQLite database for sharing of application data and storage, SSL libraries for internet security, etc.

Android Runtime - There are core libraries along with DVM (Dalvik Virtual Machine) or ART(Android RunTime) as runtime which is
helpful for running an Android application. DVM is optimized for mobile devices. DVM provides fast performance and consumes less memory.
Replacing DVM, ART(Android RunTime) virtual machine was introduced to execute android apps from Android lollipop 5.0 version (API level 21).

Android Framework - It consists of Android APIs like UI (User Interface), resources, content providers (data), locations, telephony,
and package managers. It provides interfaces and classes for the development of Android applications.

Android Applications - Applications like home, games, contacts, settings, browsers, etc. uses the Android framework that
will make use of Android runtime and libraries.
Android Architecture


