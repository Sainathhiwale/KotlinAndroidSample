              Data Binding
Project Link: https://developer.android.com/codelabs/android-databinding#0
Tutorial Link: https://blog.logrocket.com/data-binding-android-tutorial-with-examples/

1. What is Data binding.
    The Data Binding Library is an Android Jetpack library that allows you to bind UI components
    in your XML layouts to data sources in your app using a declarative format rather than programmatically,
    reducing boilerplate code.

2. why data binding we use in android project?
   - Improve the performance of the app.
   - Eliminates findViewById() makes code concise, makes code easier to read and maintain.
   - Recognize error during the compile time.

3. How to enable Data Binding and convert the layout in Android?
   To enabled the data binding in android project we need to add the buildFeature in build.gradle app level
   note: first created the layout tag inside the activity and fragment file or else data binding object will not created in MainActivity code.
   build.gradle :
   1.Add this in java android project
    Add the following lines to your gradle.properties file to enable data binding logging and see if there are any additional details in the logs:
    android.databinding.enableV2=true
    android.databinding.printInnerBindingStats=true
   android
   {
     buildFeatures{
       dataBinding = true
     }
   }
   old style to define data binding in gradle file
    dataBinding
    {
           enable = true
    }
   2.Add this in java android project
    If your project uses Kotlin and when using the Kotlin DSL gradle the below declaration will work for you

    plugins {
        id("com.android.application")
        id("kotlin-kapt") // for data binding added

    }
    android {

        dataBinding {
            android.buildFeatures.dataBinding = true
        }
        dependencies {

            // Apply the kapt plugin for data binding
            implementation("androidx.databinding:databinding-runtime:4.1.4")
        }

    }

4. How to the binding object is created in android project
 once enabled the "android.buildFeatures.dataBinding = true" tag in build.gradle app level file
 1.The ActivityMainBinding class is automatically generated based on the layout file name (activity_main.xml).
 2.The DataBindingUtil.setContentView method is used to set the content view of the activity and create the binding object.
 3.After creating the binding object, you can use it to access views and bind data directly.
   The binding object has references to all the views defined in your layout.


 Example
 main_activity layout file:
 <?xml version="1.0" encoding="utf-8"?>
 <layout
     xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools" >

 <androidx.constraintlayout.widget.ConstraintLayout
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     tools:context=".MainActivity">

     <TextView
         android:id="@+id/textView"
         android:layout_width="match_parent"
         android:layout_height="@dimen/dimen_48dp"
         app:layout_constraintBottom_toBottomOf="parent"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toTopOf="parent" />

     <EditText
         android:id="@+id/editText"
         android:layout_width="match_parent"
         android:layout_height="@dimen/dimen_48dp"
         android:inputType="text"
         app:layout_constraintBottom_toBottomOf="parent"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintHorizontal_bias="0.0"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/textView"
         app:layout_constraintVertical_bias="0.054" />

     <Button
         android:id="@+id/submit_Button"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:text="@string/submit"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintHorizontal_bias="0.0"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/editText" />

 </androidx.constraintlayout.widget.ConstraintLayout>


 </layout>

 Data binding MainActivity
 1. create main activity data binding object automatically generated based on the layout file name
    activity_main  - ActivityMainBinding
 2. The DataBindingUtil.setContentView method is used to set the content view of the activity and create the binding object.
 3. We can use kotlin apply scope function to reduce repetition of name text
 package com.examen.kotlinandroidsample

 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
 import android.view.View
 import androidx.databinding.DataBindingUtil
 import com.examen.kotlinandroidsample.databinding.ActivityMainBinding

 class MainActivity : AppCompatActivity(), View.OnClickListener {
     private lateinit var activityMainBinding: ActivityMainBinding
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         activityMainBinding = DataBindingUtil.setContentView(this, R.layout.activity_main)
         initView()
     }

     private fun initView() {
         activityMainBinding.submitButton.setOnClickListener(this)
     }

     override fun onClick(v: View?) {
         if (v?.id==R.id.submit_Button){
            displayMessage()
         }
     }

     private fun displayMessage() {
         activityMainBinding.textView.text = "Welcome:" + activityMainBinding.editText.text
     }
 }

 Kotlin Scope function apply
 apply:
 1.The primary use of apply is to configure properties of an object. It allows you to set multiple
   properties on an object within a single block of code.
   example:

   val person = Person().apply {
       name = "John"
       age = 30
       address = "123 Main Street"
   }

 2.Initializing and Configuring Android Views:
   apply is often used in Android development to initialize and configure UI elements. For instance:
    Example:
    activityMainBinding.apply {
               textView.text = "Welcome:" + editText.text
           }


